plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
    id 'application'
    id 'org.beryx.runtime' version '1.12.7'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}


ext {
    javafxVersion = '15'
    platformModifier = 'win'
}
application {
    mainClass = "com.github.lkapitman.App"
    applicationName = 'OCSLauncher'
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"
javadoc.options.encoding = 'UTF-8'

dependencies {
    // Use JUnit Jupiter for testing.
    // testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'com.jfoenix:jfoenix:9.0.10'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation(
            "org.openjfx:javafx-base:${javafxVersion}:${platformModifier}",
            "org.openjfx:javafx-controls:${javafxVersion}:${platformModifier}",
            "org.openjfx:javafx-graphics:${javafxVersion}:${platformModifier}",
            "org.openjfx:javafx-fxml:${javafxVersion}:${platformModifier}",
            "org.openjfx:javafx-swing:${javafxVersion}:${platformModifier}",
            "org.openjfx:javafx-web:${javafxVersion}:${platformModifier}",
            //"org.openjfx:javafx-media:${javafxVersion}:${platformModifier}",
    )
}

//tasks.named('test') {
//    // Use JUnit Platform for unit tests.
//    useJUnitPlatform()
//}

// Для корректной работы jfoenix. И да, я знаю что это пиздец.
def args = [
        '--add-modules=javafx.controlsц,javafx.media,javafx.graphics,javafx.fxml,javafx.web,javafx.base',
        "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
        "--illegal-access=warn",
        "--add-opens=javafx.controls/javafx.scene.control.skin=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
        //the next line changes everything.
        "--add-opens=java.base/java.lang.reflect=com.jfoenix",

        "--add-exports=javafx.controls/javafx.scene.control.skin=com.jfoenix",
        "--add-exports=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-exports=java.base/java.lang.reflect=com.jfoenix",
        "--add-exports=javafx.controls/com.Sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",

        "--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED",

        "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior" +
                "=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior" +
                "=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.binding=com.jfoenix",
        "--illegal-access=warn",
        "--add-opens=javafx.controls/javafx.scene.control.skin=com.jfoenix",
        "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior" +
                "=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix",

        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix"
]

run {
    jvmArgs = args
}

// 2nd approach
tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

// runtime {
//     options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

// // Uncomment and adjust the code below if you want to generate images for multiple platforms.
// // (You need to also uncomment the line 'targetPlatformName = ...' in the jpackage block.)

//     targetPlatform("lin") {
//         jdkHome = "V:\\Workspace\\Java\\Minecraft\\SCO-Launcher\\Launcher\\app\\JDKBuild\\linux"
//     }

//     targetPlatform("win") {
//         jdkHome = "C:\\Program Files\\AdoptOpenJDK\\jdk-15.0.2.7-hotspot"
//     }

//     launcher {
//         noConsole = true
//     }
//     jpackage {
//         // Uncomment and adjust the following line if your runtime task is configured to generate images for multiple platforms
//         targetPlatformName = "win"

//         def currentOs = org.gradle.internal.os.OperatingSystem.current()
//         def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
//         imageOptions += ['--icon', "src/main/resources/icons/icon.$imgType"]
//         installerOptions += ['--resource-dir', "src/main/resources"]
//         installerOptions += ['--vendor', 'OCS Corporation']

//         if(currentOs.windows) {
//             installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
//         }
//         else if (currentOs.linux) {
//             installerOptions += ['--linux-package-name', 'OCSLauncher','--linux-shortcut']
//         }
//     }
// }

